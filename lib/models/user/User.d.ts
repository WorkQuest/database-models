import { Media } from "../Media";
import { Session } from "./Session";
import { Review } from "../quest/Review";
import { RatingStatistic } from "./RatingStatistic";
import { ChatMember } from "../chats/ChatMember";
import { LocationPostGIS, Location, Priority, WorkPlace } from "../types";
import { UserSpecializationFilter } from "./UserSpecializationFilter";
import { DiscussionLike } from "../discussion/DiscussionLike";
import { DiscussionCommentLike } from "../discussion/DiscussionCommentLike";
import { Chat } from "../chats/Chat";
import { QuestsStatistic } from "../quest/QuestsStatistic";
import { Wallet } from "../wallet/Wallet";
import { ChatsStatistic } from "../chats/ChatsStatistic";
import { UserRole, UserSettings, UserStatus, StatusKYC } from "./types";
import { Model } from "sequelize-typescript";
export declare const defaultUserSettings: UserSettings;
export declare class User extends Model {
    id: string;
    avatarId: string;
    firstName: string;
    lastName: string;
    location: Location;
    email: string;
    role: UserRole;
    additionalInfo: object;
    password: string;
    phone: string;
    tempPhone: string;
    settings: UserSettings;
    status: UserStatus;
    statusKYC: StatusKYC;
    wagePerHour: string;
    workplace: WorkPlace;
    priority: Priority;
    locationPostGIS: LocationPostGIS;
    ratingStatistic: RatingStatistic;
    questsStatistic: QuestsStatistic;
    avatar: Media;
    sessions: Session[];
    reviews: Review[];
    medias: Media[];
    userSpecializations: UserSpecializationFilter[];
    wallet: Wallet;
    chatOfUser: Chat;
    chatStatistic: ChatsStatistic;
    chatMember: ChatMember;
    userIndustryForFiltering: UserSpecializationFilter;
    userSpecializationForFiltering: UserSpecializationFilter;
    chatsOfUser: Chat[];
    chatMembers: ChatMember[];
    discussionLikes: DiscussionLike[];
    commentLikes: DiscussionCommentLike[];
    passwordCompare(pwd: string): Promise<boolean>;
    static findWithEmail(email: string): Promise<User>;
    static findWithSocialId(network: string, id: string): Promise<User>;
    isTOTPEnabled(): boolean;
}
